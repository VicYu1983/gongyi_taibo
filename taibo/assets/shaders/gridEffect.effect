// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: legacy/main-functions/general-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        emissive:       { value: 1 }
        scale:          { value: 1 }
        distance:       { value: 1 }
  - name: transparent
    passes:
    - vert: general-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
          
      properties: *props
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>
  #include <cc-local.chunk>
  #include <math>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_normal;

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
    float emissive;
    float scale;
    float distance;
  };

  vec4 frag () {
    vec3 objWorldPos = cc_matWorld[3].xyz;
    vec4 localPos = inverse_mat4(cc_matWorld) * vec4(v_position, 1.0);

    vec3 cameraDir = normalize(cc_cameraPos.xyz - v_position);
    float cameraDotNormal = 1.0 - dot(cameraDir, v_normal);
    float gridX = smoothstep(.999, 1.0, abs(sin(localPos.x * scale)));
    float gridZ = smoothstep(.999, 1.0, abs(sin(localPos.z * scale)));
    float grid = gridX + gridZ;
    float mask = length(localPos) / distance;
    mask = 1.0 - clamp(mask, 0., 1.);
    mask = pow(mask, 2.0);
    vec4 col = vec4(mainColor.rgb * emissive, (cameraDotNormal + grid) * mask);

    return CCFragOutput(col);
  }
}%
