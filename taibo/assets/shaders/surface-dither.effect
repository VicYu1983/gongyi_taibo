// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: standard-vs
      frag: standard-fs
      properties: &props
        mainTexture:              { value: grey, target: albedoMap, editor: { displayName: AlbedoMap } }
        ditherTexture:            { value: white, target: ditherMap, editor: { displayName: DitherMap  } }
        transparencyThreshold:    { value: 0.5, target: ditherParams.w, editor: { parent: USE_DITHER_MAP, slide: true, range: [0, 1.0], step: 0.001 } }
        mainColor:                { value: [1.0, 1.0, 1.0, 1.0], target: albedo, linear: true, editor: { displayName: Albedo, type: color } }
        albedoScale:              { value: [1.0, 1.0, 1.0], target: albedoScaleAndCutoff.xyz }
        alphaThreshold:           { value: 0.5, target: albedoScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST, slide: true, range: [0, 1.0], step: 0.001 } }
        roughness:                { value: 0.8, target: pbrParams.y, editor: { slide: true, range: [0, 1.0], step: 0.001 } }
        metallic:                 { value: 0.6, target: pbrParams.z, editor: { slide: true, range: [0, 1.0], step: 0.001 } }
    - &forward-add
      vert: standard-vs
      frag: standard-fs
      phase: forward-add
      propertyIndex: 0
      embeddedMacros: { CC_FORWARD_ADD: true }
      depthStencilState:
        depthFunc: equal
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: one
          blendSrcAlpha: zero
          blendDstAlpha: one
    - &shadow-caster
      vert: shadow-caster-vs
      frag: shadow-caster-fs
      phase: shadow-caster
      propertyIndex: 0
      rasterizerState:
        cullMode: front
      properties:
        mainColor:      { value: [1.0, 1.0, 1.0, 1.0], target: albedo, editor: { displayName: Albedo, type: color } }
        albedoScale:    { value: [1.0, 1.0, 1.0], target: albedoScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: albedoScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        mainTexture:    { value: grey, target: albedoMap, editor: { displayName: AlbedoMap } }
  - name: transparent
    passes:
    - vert: standard-vs
      frag: standard-fs
      embeddedMacros: { CC_FORCE_FORWARD_SHADING: true }
      depthStencilState:
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
    - *forward-add
    - *shadow-caster
}%


CCProgram shared-ubos %{
  uniform Constants {
    vec4 albedo;
    vec4 albedoScaleAndCutoff;
    vec4 pbrParams;
    vec4 ditherParams;
  };
}%

CCProgram macro-remapping %{
  // ui displayed macros
  #pragma define-meta USE_TWOSIDE
  #pragma define-meta USE_VERTEX_COLOR

  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE
  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR
}%
CCProgram surface-vertex %{
  #define CC_SURFACES_VERTEX_MODIFY_WORLD_POS
  vec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)
  {
    return In.worldPos;
  }
  
  #define CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL
  vec3 SurfacesVertexModifyWorldNormal(in SurfacesStandardVertexIntermediate In)
  {
    return In.worldNormal.xyz;
  }
  
  #define CC_SURFACES_VERTEX_MODIFY_UV
  void SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)
  {
  }
}%


CCProgram surface-fragment %{
  #if USE_ALBEDO_MAP
    uniform sampler2D albedoMap;
    #pragma define-meta ALBEDO_UV options([v_uv, v_uv1])
  #endif

  #if USE_DITHER_MAP
    uniform sampler2D ditherMap;
    #pragma define-meta DITHER_UV options([v_uv, v_uv1])
  #endif

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r])
  #endif

  #define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY
  vec4 SurfacesFragmentModifyBaseColorAndTransparency()
  {
    vec4 baseColor = albedo;
    
    #if USE_ALBEDO_MAP
      vec4 texColor = texture(albedoMap, ALBEDO_UV);
      texColor.rgb = SRGBToLinear(texColor.rgb);
      baseColor *= texColor;
    #endif

    #if USE_DITHER_MAP
      float ditherValue = texture(ditherMap, gl_FragCoord.xy / vec2(8.0, 8.0)).r;
      if (ditherValue > ditherParams.w) {
        discard;
      }
    #endif

    #if USE_ALPHA_TEST
      if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;
    #endif

    baseColor.rgb *= albedoScaleAndCutoff.xyz;
    return baseColor;
  }

  #define CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY
  void SurfacesFragmentAlphaClipOnly()
  {
    #if USE_ALPHA_TEST
      float alpha = albedo.ALPHA_TEST_CHANNEL;
      #if USE_VERTEX_COLOR
        alpha *= FSInput_vertexColor.a;
      #endif
      #if USE_ALBEDO_MAP
        alpha = texture(albedoMap, ALBEDO_UV).ALPHA_TEST_CHANNEL;
      #endif
  
      if (alpha < albedoScaleAndCutoff.w) discard;
    #endif
  }

  #define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL
  vec3 SurfacesFragmentModifyWorldNormal()
  {
    return normalize(FSInput_worldNormal);
  }

  #define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE
  vec3 SurfacesFragmentModifyEmissive()
  {
    return vec3(0.0, 0.0, 0.0);
  }

  #define CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS
  vec4 SurfacesFragmentModifyPBRParams()
  {
    // ao, roughness, metallic, specularIntensity
    return vec4(1.0, pbrParams.y, pbrParams.z, 0.5);
  }
}%




CCProgram standard-vs %{
  precision highp float;

  // 1. surface internal macros, for technique usage or remapping some user (material) macros to surface internal macros
  #include <macro-remapping>
  #include <surfaces/effect-macros/common-macros>

  // 2. common include with corresponding shader stage, include before surface functions
  #include <surfaces/includes/common-vs>

  // 3. user surface functions that can use user (effect) parameters (ubo Constants)
  //    see surfaces/default-functions/xxx.chunk
  #include <shared-ubos>
  #include <surface-vertex>

  // 4. surface include with corresponding shader stage and shading-model (optional)
  #include <surfaces/includes/standard-vs>

  // 5. shader entry with corresponding shader stage and technique usage/type
  #include <shading-entries/main-functions/render-to-scene/vs>
}%


CCProgram shadow-caster-vs %{
  precision highp float;
  #include <surfaces/effect-macros/render-to-shadowmap>
  #include <surfaces/includes/common-vs>
  #include <shared-ubos>
  #include <surface-vertex>
  #include <shading-entries/main-functions/render-to-shadowmap/vs>
}%



CCProgram standard-fs %{
  // shading-model : standard
  // lighting-model : standard (isotropy / anisotropy pbr)
  // shader stage : fs
  // technique usage/type : render-to-scene

  precision highp float;
  // 1. surface internal macros, for technique usage or remapping some user (material) macros to surface internal macros
  #include <macro-remapping>
  #include <surfaces/effect-macros/common-macros>

  // 2. common include with corresponding shader stage, include before surface functions
  #include <surfaces/includes/common-fs>

  // 3. user surface functions that can use user (effect) parameters (ubo Constants)
  //    see surfaces/default-functions/xxx.chunk
  #include <shared-ubos>
  #include <surface-fragment>

  // 4. lighting-model (optional)
  #include <lighting-models/includes/standard>

  // 5. surface include with corresponding shader stage and shading-model (optional)
  #include <surfaces/includes/standard-fs>

  // 6. shader entry with corresponding shader stage and technique usage/type
  
  

  #if (CC_PIPELINE_TYPE == CC_PIPELINE_TYPE_FORWARD || CC_FORCE_FORWARD_SHADING)


    


    layout(location = 0) out vec4 fragColorX;

 

    void main()  {
    #if CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER
      float NoL = dot(-cc_mainLitDir.xyz, FSInput_worldNormal.xyz); //trigger ubo binding
      vec4 color = SurfacesFragmentModifyBaseColorAndTransparency();
      float fogFactor = 1.0;
      #if CC_FORWARD_ADD
        color.rgb = vec3(0.0);
      #endif
    #else
      // Surface
      SurfacesMaterialData surfaceData;
      CCSurfacesFragmentGetMaterialData(surfaceData);

      // Shadow parameters
      vec2 shadowBias = vec2(0.0);
      vec3 colDebugCSMLayer = vec3(1.0);
      #if CC_RECEIVE_SHADOW
        shadowBias = FSInput_shadowBias;
        #if !CC_FORWARD_ADD
          #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW
            if (IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION)
            {
                vec4 csmPos;
                vec4 shadowProjDepthInfo, shadowProjInfo;
                vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;
                int csmLayer = -1;
                csmLayer = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, surfaceData.worldPos);
                bool OutOfRange = csmLayer < 0;
                if (OutOfRange)
                    colDebugCSMLayer = vec3(1.0);
                else if (csmLayer == 0)
                    colDebugCSMLayer = vec3(1.0, 0.0, 0.0);
                else if (csmLayer == 1)
                    colDebugCSMLayer = vec3(0.0, 1.0, 0.0);
                else if (csmLayer == 2)
                    colDebugCSMLayer = vec3(0.0, 0.0, 1.0);
                else if (csmLayer == 3)
                    colDebugCSMLayer = vec3(0.0, 1.0, 1.0);
            }
          #endif
        #endif
      #endif


      // Fog factor
      float fogFactor = 1.0;
      #if !CC_FORWARD_ADD
        #if CC_USE_FOG != CC_FOG_NONE
          #if !CC_USE_ACCURATE_FOG
            fogFactor = FSInput_fogFactor;
          #else
            CC_TRANSFER_FOG_BASE(vec4(FSInput_worldPos, 1.0), fogFactor);
          #endif
        #endif

        #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW
          if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG) {
              fogFactor = 1.0;
          }
        #endif
      #endif


      // Lighting
      LightingResult lightingResult;
      CCSurfacesLighting(lightingResult, surfaceData, shadowBias);


      // Debug view
      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && CC_SURFACES_ENABLE_DEBUG_VIEW
        vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);
        float materialTransparency = CCSurfacesShading(surfaceData, lightingResult).a;

        #if !CC_FORWARD_ADD && !CC_SURFACES_LIGHTING_DISABLE_DIFFUSE
          CCSurfacesDebugViewMeshData(debugColor);
          if (CCSurfacesDebugViewSurfaceData(debugColor, surfaceData))
          {
            debugColor.a = materialTransparency;
          }
          if (IS_DEBUG_VIEW_SINGLE_MODE(CC_SURFACES_DEBUG_VIEW_FOG))
          {
            debugColor.rgb = vec3(1.0 - fogFactor);
          }
        #endif

        // only base pass or direct lighting is enabled in add pass
        #if CC_FORWARD_ADD
          if (IS_DEBUG_VIEW_SINGLE_MODE(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE) || IS_DEBUG_VIEW_SINGLE_MODE(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR) || IS_DEBUG_VIEW_SINGLE_MODE(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL) ||
              IS_DEBUG_VIEW_SINGLE_MODE(CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE) || IS_DEBUG_VIEW_SINGLE_MODE(CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR) || IS_DEBUG_VIEW_SINGLE_MODE(CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR))
        #endif
          {
              if (CCSurfacesDebugViewLightingResult(debugColor, lightingResult))
              {
                // Use material alpha
                debugColor.a = materialTransparency;

                // lighting needs color space conversion
                #if !CC_USE_FLOAT_OUTPUT
                  debugColor.rgb = HDRToLDR(debugColor.rgb);
                  debugColor.rgb = LinearToSRGB(debugColor.rgb);
                #endif
              }
          }
        if (IS_DEBUG_VIEW_ENABLE_WITH_CAMERA) {
          fragColorX = debugColor;
          return;
        }

      #elif CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW
        CCSurfacesDebugViewCompositeLightingResult(lightingResult);
      #endif


      // Shading
      vec4 color = CCSurfacesShading(surfaceData, lightingResult);

      #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW
        // CSM Debug
        if (IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION) {
            color.rgb *= colDebugCSMLayer.rgb;
        }
        // Invalid input data visualization
        #if CC_SURFACES_USE_TANGENT_SPACE
          color = CCSurfacesDebugDisplayInvalidInputData(color, FSInput_worldTangent);
        #endif
      #endif
    #endif

      // Fog, rgbe and gamma output can't apply fog with forward-add pass
      // todo: apply fogColorBrightness to linear fogColor for supporting scatter lighting with HDR
      #if CC_USE_FOG != CC_FOG_NONE && (!CC_USE_FLOAT_OUTPUT || CC_IS_TRANSPARENCY_PASS)
        #if !CC_FORWARD_ADD
          #ifdef CC_SURFACES_LIGHTING_MODIFY_FOG
            color.rgb = CCSurfacesLightingModifyFog(fogFactor, color.rgb, surfaceData, lightingResult);
          #else
            CC_APPLY_FOG_BASE(color, fogFactor);
          #endif
        #endif
      #endif

      // Color output
      #if CC_USE_RGBE_OUTPUT
        color = packRGBE(color.rgb); // for reflection-map
      #else
        color = CCSurfacesDebugDisplayInvalidNumber(color);
        #if !CC_USE_FLOAT_OUTPUT || CC_IS_TRANSPARENCY_PASS
          color.rgb = HDRToLDR(color.rgb);
          color.rgb = LinearToSRGB(color.rgb);
        #endif
      #endif



      fragColorX = color;
    }











  #elif CC_PIPELINE_TYPE == CC_PIPELINE_TYPE_DEFERRED








    layout(location = 0) out vec4 albedoOut;
    layout(location = 1) out vec4 emissiveOut;
    layout(location = 2) out vec4 normalOut;

    void main () {
      // Surface
      SurfacesMaterialData surfaceData;
      CCSurfacesFragmentGetMaterialData(surfaceData);

      // location of subpass output should be ordered by name.
      albedoOut = CCSurfacesDeferredOutputBaseColor(surfaceData);
      normalOut = CCSurfacesDeferredOutputNormalMR(surfaceData);
      emissiveOut = CCSurfacesDeferredOutputEmissiveAO(surfaceData);

    // Debug view
    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && CC_SURFACES_ENABLE_DEBUG_VIEW
      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);
      CCSurfacesDebugViewMeshData(debugColor);
      CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);
      if (IS_DEBUG_VIEW_ENABLE_WITH_CAMERA) {
        albedoOut = debugColor;
      }
    #endif
    }












  #endif

}%

CCProgram shadow-caster-fs %{
  precision highp float;
  #include <surfaces/effect-macros/render-to-shadowmap>
  #include <surfaces/includes/common-fs>
  #include <shared-ubos>
  #include <surface-fragment>
  #include <shading-entries/main-functions/render-to-shadowmap/fs>
}%
